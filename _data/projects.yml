- repo: elliptic-bitcoin-aml
  tab: Cryptocurrency AML Detection
  url: https://github.com/mpaulinv/elliptic-bitcoin-aml
  description: Developed a robust system to detect illicit Bitcoin transactions at scale, leveraging advanced graph analytics and machine learning. Tackled challenges in dynamic, noisy data and regulatory uncertainty.
  objective: Build a solution to accurately flag suspicious cryptocurrency activity and support anti-money laundering (AML) compliance in real-world blockchain environments.
  overview: Used the Elliptic dataset to engineer graph-based features, train predictive models, and visualize illicit transaction patterns across time for compliance and research use.
  tech_stack: [Python, NetworkX, scikit-learn, PyTorch, matplotlib]
  methods: |
    - Engineered centrality and clustering features from blockchain transaction graphs.
    - Implemented Random Forest and Graph Attention Network (GAT) models for node classification.
    - Addressed temporal data drift and noisy labels by designing robust validation splits and feature selection pipelines.
    - Visualized evolving illicit activity using custom network diagrams and ROC analysis.
  results: Achieved a significant improvement in illicit activity detection (e.g., ROC AUC up to XX%). Outperformed deep learning baselines with explainable graph features.
  impact: Provided actionable tools for compliance teams; learned to handle rapidly evolving, adversarial data and regulatory challenges.
  date: 2024-03
  images:
    - /assets/images/elliptic-scatterplot.png
    - /assets/images/elliptic-graph-visualization.png

- repo: heart_disease
  tab: Heart Disease Prediction
  url: https://github.com/mpaulinv/heart_disease
  description: Built an end-to-end ML pipeline for heart disease risk, focusing on feature interpretability and clinical relevance. Faced real-world data quality issues and model deployment constraints.
  objective: Enable early and explainable prediction of heart disease to support preventative healthcare and empower both clinicians and patients with actionable insights.
  overview: Analyzed the Cleveland dataset, engineered predictive features, and produced interactive risk visualizations for clinicians, with a focus on transparency and usability.
  tech_stack: [Python, pandas, scikit-learn, matplotlib, seaborn]
  methods: |
    - Cleaned and imputed missing clinical data, engineered interaction terms.
    - Trained and evaluated logistic regression and Random Forest models, optimizing for both accuracy and interpretability.
    - Addressed class imbalance and overfitting through cross-validation and custom metrics.
    - Visualized risk factors and model outputs for non-technical users.
  results: Models achieved strong accuracy (XX% AUC); key features such as age and cholesterol identified and explained for clinical use.
  impact: Empowered clinicians with interpretable risk tools; gained experience in model transparency and stakeholder communication.
  date: 2024-01
  images:
    - /assets/images/heart-feature-importance.png
    - /assets/images/heart-roc-curve.png

- repo: lichess_dashboard
  tab: Chess Performance Dashboard
  url: https://github.com/mpaulinv/lichess_dashboard
  description: Created an interactive dashboard for chess players to analyze and improve their performance using real-time data from Lichess. Overcame API and data normalization challenges.
  objective: Deliver actionable insights for chess players to identify strengths, weaknesses, and track progress over time in a user-friendly interface.
  overview: Streamlit app fetches, processes, and visualizes personalized game stats and trends for users, with a focus on clarity and ease of exploration.
  tech_stack: [Python, Streamlit, Pandas, Plotly, Lichess API]
  methods: |
    - Integrated with Lichess API for real-time data retrieval and user authentication.
    - Built interactive visualizations (openings, win rates, rating trends) using Plotly.
    - Designed a user-friendly UI with custom filters and export capability.
    - Managed API rate limits and inconsistent data formats through caching and preprocessing.
  results: Users can drill down into their chess history, track improvement, and export custom reports; dashboard attracted positive feedback from the chess community.
  impact: Helped hundreds of players target their training; learned to balance UX, data engineering, and scalability.
  date: 2023-11
  images:
    - /assets/images/lichess-dashboard-overview.png
    - /assets/images/lichess-opening-performance.png

- repo: roberta_qa
  tab: Question Answering with RoBERTa
  url: https://github.com/mpaulinv/roberta_qa
  description: Researched and improved RoBERTaâ€™s performance on challenging "why" questions, addressing limitations in current NLP models. Faced challenges in dataset noise and adversarial evaluation.
  objective: Push the boundaries of machine reasoning by enabling robust, explainable QA on causal ("why") questions, which are critical for trustworthy AI.
  overview: Evaluated RoBERTa on standard and adversarial datasets, implemented data augmentation and transfer learning, and analyzed model failures for deeper understanding.
  tech_stack: [Python, PyTorch, HuggingFace Transformers, TextAttack, matplotlib]
  methods: |
    - Performed error analysis of model predictions and adversarial robustness.
    - Applied data augmentation (TextAttack, CLARE) and fine-tuned on specialized QA datasets.
    - Visualized performance disparities and error types using confusion matrices and custom plots.
    - Tackled annotation noise with post-processing and consensus strategies.
  results: Identified and mitigated key model weaknesses; achieved measurable accuracy gains on "why" questions through targeted training.
  impact: Advanced understanding of NLP model limitations; informed future research directions in explainable AI.
  date: 2024-04
  images:
    - /assets/images/roberta-qa-results.png
    - /assets/images/roberta-error-analysis.png
